{"mappings":"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","sources":["sw.js"],"sourcesContent":["const CACHE_NAME = 'devtools-conglomerate-v1';\r\nconst STATIC_CACHE = 'devtools-static-v1';\r\nconst DYNAMIC_CACHE = 'devtools-dynamic-v1';\r\n\r\n// Files to cache immediately\r\nconst STATIC_ASSETS = [\r\n  '/',\r\n  '/dashboard.html',\r\n  '/index.html',\r\n  '/all-apis.html',\r\n  '/docs.html',\r\n  '/community.html',\r\n  '/blog.html',\r\n  '/about.html',\r\n  '/legal.html',\r\n  '/manifest.json',\r\n  'https://cdn.tailwindcss.com',\r\n  '/assets/DevTools Conglomerate Tech Logo 1.png',\r\n  '/assets/DevTools Conglomerate Tech Logo 3.png',\r\n  '/assets/Innovative Tech Logo with Geometric Abstract Shapes.png',\r\n  '/assets/Modern Tech Logo with Deep Blue and Violet Colors.png',\r\n  '/assets/Sleek Tech Logo with Circuit-Inspired Design.png'\r\n];\r\n\r\n// Install event - cache static assets\r\nself.addEventListener('install', (event) => {\r\n  console.log('Service Worker: Installing...');\r\n  event.waitUntil(\r\n    caches.open(STATIC_CACHE)\r\n      .then((cache) => {\r\n        console.log('Service Worker: Caching static assets');\r\n        return cache.addAll(STATIC_ASSETS);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Service Worker: Failed to cache static assets', error);\r\n      })\r\n  );\r\n  self.skipWaiting();\r\n});\r\n\r\n// Activate event - clean up old caches\r\nself.addEventListener('activate', (event) => {\r\n  console.log('Service Worker: Activating...');\r\n  event.waitUntil(\r\n    caches.keys().then((cacheNames) => {\r\n      return Promise.all(\r\n        cacheNames.map((cacheName) => {\r\n          if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {\r\n            console.log('Service Worker: Deleting old cache:', cacheName);\r\n            return caches.delete(cacheName);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n  self.clients.claim();\r\n});\r\n\r\n// Fetch event - serve cached content when offline\r\nself.addEventListener('fetch', (event) => {\r\n  // Only handle GET requests\r\n  if (event.request.method !== 'GET') return;\r\n\r\n  // Skip cross-origin requests (like Tailwind CDN)\r\n  if (!event.request.url.startsWith(self.location.origin) &&\r\n      !event.request.url.startsWith('https://cdn.tailwindcss.com')) {\r\n    return;\r\n  }\r\n\r\n  event.respondWith(\r\n    caches.match(event.request)\r\n      .then((cachedResponse) => {\r\n        // Return cached version if available\r\n        if (cachedResponse) {\r\n          return cachedResponse;\r\n        }\r\n\r\n        // Otherwise, fetch from network\r\n        return fetch(event.request)\r\n          .then((response) => {\r\n            // Don't cache if not a valid response\r\n            if (!response || response.status !== 200 || response.type !== 'basic') {\r\n              return response;\r\n            }\r\n\r\n            // Clone the response\r\n            const responseToCache = response.clone();\r\n\r\n            // Cache the fetched response\r\n            caches.open(DYNAMIC_CACHE)\r\n              .then((cache) => {\r\n                cache.put(event.request, responseToCache);\r\n              });\r\n\r\n            return response;\r\n          })\r\n          .catch((error) => {\r\n            console.log('Service Worker: Fetch failed, returning offline page', error);\r\n            // Return a basic offline page for navigation requests\r\n            if (event.request.destination === 'document') {\r\n              return caches.match('/dashboard.html');\r\n            }\r\n          });\r\n      })\r\n  );\r\n});\r\n\r\n// Background sync for when connection is restored\r\nself.addEventListener('sync', (event) => {\r\n  console.log('Service Worker: Background sync triggered');\r\n  if (event.tag === 'background-sync') {\r\n    event.waitUntil(doBackgroundSync());\r\n  }\r\n});\r\n\r\nfunction doBackgroundSync() {\r\n  // Implement any background sync logic here\r\n  console.log('Service Worker: Performing background sync');\r\n  return Promise.resolve();\r\n}\r\n\r\n// Push notifications (placeholder for future implementation)\r\nself.addEventListener('push', (event) => {\r\n  console.log('Service Worker: Push received');\r\n  if (event.data) {\r\n    const data = event.data.json();\r\n    const options = {\r\n      body: data.body,\r\n      icon: '/assets/DevTools Conglomerate Tech Logo 1.png',\r\n      badge: '/assets/DevTools Conglomerate Tech Logo 1.png',\r\n      vibrate: [100, 50, 100],\r\n      data: {\r\n        dateOfArrival: Date.now(),\r\n        primaryKey: 1\r\n      }\r\n    };\r\n    event.waitUntil(\r\n      self.registration.showNotification(data.title, options)\r\n    );\r\n  }\r\n});\r\n\r\n// Notification click handler\r\nself.addEventListener('notificationclick', (event) => {\r\n  console.log('Service Worker: Notification clicked');\r\n  event.notification.close();\r\n\r\n  event.waitUntil(\r\n    clients.openWindow('/dashboard.html')\r\n  );\r\n});\r\n"],"names":[],"version":3,"file":"sw.js.map","sourceRoot":"/__parcel_source_root/"}